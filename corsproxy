#!venv/bin/python -u
'''
Provides a simple CORS proxy for GET and POST requests. Reads list of
target port:host[:targetport] from the command line, or from your config
file.
'''
# ruff: noqa: E402
from gevent import monkey; monkey.patch_all() # noqa :E702
import os
import sys
import argparse
from pathlib import Path
import requests
from bottle import Bottle, request, response

# Get location of optional conf file
CONFFILE = Path(os.getenv('XDG_CONFIG_HOME', '~/.config'),
        Path(sys.argv[0]).stem).expanduser()

def check_targets(targets):
    'Do some sanity checking on user specified target mappings'
    ports = set()
    for t in targets:
        if ':' not in t:
            sys.exit(f'Require port:host in entry "{t}"')
        vals = t.split(':')
        if len(vals) > 3:
            sys.exit(f'Invalid entry "{t}"')
        port = vals[0]
        if port in ports:
            sys.exit(f'Listening port {port} specified more than once')
        ports.add(port)

# Process command line options
opt = argparse.ArgumentParser(description=__doc__.strip())
opt.add_argument('targets', nargs='*',
        help='1 or more proxy target hosts in port:host[:targetport] '
        'format. if not set then will try to read from '
        f'{CONFFILE} file.')
args = opt.parse_args()

targets = args.targets

if not targets:
    if CONFFILE.exists():
        targets = CONFFILE.read_text().strip().split()
    if not targets:
        opt.error('No target host mappings defined')

check_targets(targets)

app = Bottle()

mytarget = None

METHODS = ['GET', 'POST', 'OPTIONS']
POST_HEADERS = {
    'Access-Control-Allow-Methods': ', '.join(METHODS),
    'Access-Control-Allow-Headers': 'Content-Type, '
    'Access-Control-Allow-Headers, Authorization, X-Requested-With',
}

@app.get('/<path:path>', method=METHODS)
def get(path):
    response.set_header('Access-Control-Allow-Origin', '*')
    qstring = request.query_string
    qstring = ('?' + qstring) if qstring else ''
    path = ('/' + path) if path else ''
    url = f'{request.urlparts[0]}://{mytarget}{path}{qstring}'
    ct = request.content_type
    header = {'Content-Type': ct} if ct else None

    if request.method == 'GET':
        r = requests.get(url, headers=header)
    else:
        response.headers.update(POST_HEADERS)

        if request.method == 'OPTIONS':
            return

        r = requests.post(url, data=request.body.read(), headers=header)

    response.status = r.status_code
    response.headers.update(r.headers)
    if "Transfer-Encoding" in response.headers.keys():
        print("removing transfer-encoding")
        del response.headers["Transfer-Encoding"]
    return r.content

@app.get('/', method=METHODS)
def getroot():
    return get(None)

def run(target):
    global mytarget
    port, host = target.split(':', maxsplit=1)
    mytarget = host
    print(f'Starting proxy for {port} -> {host}')
    app.run(host='0.0.0.0', port=port, server='gevent', quiet=True)

# Just run in same process if we only have a single proxy service
# configured. Otherwise create and start a process for each service.
if len(targets) > 1:
    import multiprocessing
    for t in targets:
        multiprocessing.Process(target=run, args=(t, )).start()

    for p in multiprocessing.active_children():
        p.join()
else:
    run(targets[0])
